package com.br.chap01_abstraction.run;

import com.br.chap01_abstraction.model.vo.Student;

public class AbstractionRun {
	
	/*
	 * 1. 객체지향언어 : "객체"를 "지향"하는 언어 (즉, 객체 중심으로 돌아가는 언어)
	 * 2. 객체 : 
	 * 		사전적정의 - 현실세계에서 독립적으로 존재하는것들 (목적이 있고 가치가 있고)
	 * 		자바에서의 정의 - 메모리영역의 Heap영역에 만들어지는 모든것들
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계에서의 객체간의 상호작용을 가상세계로 구현하는 과정
	 * 			ex) 인터넷 쇼핑몰 (객체 == 고객, 상품 / 상호작용 == 상품을 구매한다)
	 * 
	 * 4. 구현하고자 하는 프로그램 상의 객체들을 만들기 위해서 
	 *    : 클래스라는 틀을 만들어야됨! (클래스란? 각 객체들의 속성(정보)들을 담아낼 그릇같은거)
	 *      >> 어떻게? => 추상화 + 캡슐화 적용
	 * 
	 * 5. 추상화 과정
	 *    1) 내가 구현하고자 하는 프로그램상에 필요한 객체들을 생각해볼 것 
	 *    2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 추출
	 *    3) 추출한 것들을 가지고 내가 구현하고자하는 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능 제거 
	 *    4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할건지
	 *    
	 *    ex) 학생 관리 프로그램
	 *    	1) 학생관련객체(홍길동학생, 김영희학생, 김말똥학생, ...)
	 *    	2) 이름, 나이, 주소, 전화번호, 키, 몸무게, 달리기속도, 학년, 반, 국어점수, ..., 발사이즈, 머리색깔, 밥먹는다, 똥싼다,..)
	 *    	3) 학생 "인적사항"을 관리 프로그램 => 이름, 나이, 주소, 전화번호, 학년, 반
	 *    	   학생 "성적"을 관리 프로그램 => 이름, 나이, 학년, 반, 국어점수, 수학점수, 영어점수
	 *    	   학생 "건강"을 관리 프로그램 => 이름, 나이, 키, 몸무게, 학년, 반, 밥먹는다, 똥싼다
	 *    
	 *    		결국 추려진게 "이름, 나이, 키" 라고 가정
	 *    
	 *    	4) String name   => 이름
	 *    	   int age   	 => 나이
	 *    	   double height => 키
	 *  
	 * 6. 위에 선정된 것들을 가지고 프로그래밍
	 * 
	 * 	  1) "변수"만을 가지고 프로그래밍을 할 경우 
	 * 		 * 변수 - 하나의 자료형의 하나의 값만 담을 수 있음 
	 * 
	 * 		 홍길동 객체 => String name1 = "홍길동"; int age1 = 20; double height1 = 160.1;
	 * 		 김말똥 객체 => String name2 = "김말똥"; int age2 = 23; double height2 = 172.3;
	 * 		  ... 수백명일 경우? 
	 * 		 => 수백개, 수천개에 해당하는 변수가 필요함 (관리하기도 힘듬)
	 * 
	 * 	  2) "배열"가지고 프로그래밍을 할 경우 
	 * 		  * 배열 - 하나의 자료형의 여러개의 값들을 보관할 수 있음 
	 * 
	 * 		  이름들만 담는 배열 String[] name = {"홍길동", "김말똥", ...};
	 * 		  나이들만 담는 배열 int[] age     = {  20  ,   23  , ...};
	 * 		  키 담는 배열 double[] height   = {161.3 , 172.4 , ...};
	 * 
	 * 		 => 혹시라도 특정학생의 정보를 지울경우 실수로 특정배열을 지우지못하면 => 학생의 정보가 달라질 수 있음
	 *          새로운 학생 정보를 추가해야될때 새로운 배열을 만들어 옮겨담고 추가해야되는 번거로움이 있음
	 *    
	 *    3) 구조체 
	 *        * 구조체 - 여러개의 자료형의 여러개의 값들을 보관할 수 있음
	 *        
	 *        String값도 담고싶고, int값도 담고싶고, double값도 같이 보관할수 있는 자료형을 
	 *        만들 수 있음 => 나만의 자료형 (사용자정의자료형) == 클래스 => model.vo 패키지에 보관
	 *        
	 */

	public static void main(String[] args) {
		// Student 클래스로 학생 객체 생성하기 
		// => new 키워드로 객체 생성 
		Student hong = new Student();
		
		// 각 영역에 "직접 접근"해서 내가 원하는 값 대입 
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 161.3;
		
		System.out.println(hong); // 자료형+@+주소값기반16진수
		System.out.println(hong.name + "님의 나이는 " + hong.age + "이고, 키는 " + hong.height);
		
		// 김말똥학생 객체
		Student ddong = new Student();
		ddong.name = "김말똥";
		ddong.age = 23;
		ddong.height = 172.1;
		
		// 출력
		System.out.println(ddong);
		System.out.println(ddong.name + ", " + ddong.age + ", " + ddong.height);
		
		
		

	}

}
